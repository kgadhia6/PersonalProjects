#Imports
import math
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
#Variables
planets = []
G = 6.67430
#Functions
def GetOrientationVector(origin: tuple, target: tuple, magnitude: float) -> tuple:
    """
    NOTE: Will not adjust to put vector origin at origin position.
    Vector origin will remain at (0,0), this must be changed beyond the function at own risk.
    """
    dx, dy = target[0] - origin[0], target[1] - origin[1]
    theta = math.atan2(dy, dx)
    return VectorizeScalar(magnitude, theta)

def VectorizeScalar(magnitude: float, theta: float) -> tuple:
    return (magnitude * math.cos(theta), magnitude * math.sin(theta))

def CalcFgVector(planet: "body") -> tuple:
    Fx, Fy = 0, 0
    for p in planets:
        if not planet == p:
            Fscalar = G * planet.m * p.m / ((p.x - planet.y)**2 + (p.y - planet.y)**2)
            orientation = GetOrientationVector(planet.position(), p.position(), Fscalar)
            Fx += orientation[0]
            Fy += orientation[1]
        continue
    return (Fx, Fy)

def dVtuple(F: tuple, mass: float, dt: float) -> tuple:
    return (F[0] / mass * dt, F[1] / mass * dt)

#Classes
class body:
    def __init__(self, mass: float, pos: tuple, v0: tuple):
        self.m = mass
        self.x, self.y = pos
        self.vx, self.vy = v0
    
    def __str__(self):
        return f'body attributes: mass = {self.m}; position = ({self.x}, {self.y}); velocity = ({self.vx}, {self.vy})'
    
    def position(self):
        return tuple([self.x, self.y])
    
    def velocity(self):
        return tuple([self.vx, self.vy])
    
    def UpdateVelocity(self):
        dV = dVtuple(CalcFgVector(self), self.m, 1)
        self.vx += dV[0]
        self.vy += dV[1]
    
    def UpdatePosition(self):
        self.x += self.vx
        self.y += self.vy

#Simulation & Plotting
p1 = body(1000, (10, -10), (0,0))
p2 = body(1000, (-10, 10), (0,0))
planets.append(p1)
planets.append(p2)

figure = plt.figure()
def animate(i):
    plt.clf()
    for p in planets:
        plt.scatter(p.x, p.y, c="black")
        p.UpdateVelocity()
        continue
    for p in planets:
        p.UpdatePosition()
        continue
    return figure

ani = FuncAnimation(figure, animate, 200)
ani.save("testanim.gif")
