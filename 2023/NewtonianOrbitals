#Imports
import math
import matplotlib.pyplot as plt

#Variables & Initializations
planets = []
dt = .0005
G = 6.6743 * 10**(-11)

#Classes
class body:
    def __init__(self, mass: float, pos: tuple, v0: tuple):
        self.m = mass
        self.x, self.y = pos
        self.vx, self.vy = v0
    
    def __str__(self):
        return f'n-body information: mass = {self.mass}; position = ({self.x}, {self.y}); velocity = ({self.vx}, {self.vy})'
    
    def velocity(self):
        return tuple([self.vx, self.vy])
    
    def position(self):
        return tuple([self.x, self.y])
    
#Functions
def FgScalar(body1: body, body2: body) -> float:
    m1, m2 = body1.m, body2.m
    r = math.sqrt( (body1.x - body2.x)**2 + (body1.y - body2.y)**2 )
    return G * m1 * m2 / r**2

def FgVector(origin: body, attractor: body) -> tuple:
    magnitude = FgScalar(origin, attractor)
    dx, dy = attractor.x - origin.x, attractor.y - origin.y
    theta = math.atan2(dy, dx)
    return (magnitude * math.cos(theta), magnitude * math.sin(theta))

def aVector(origin: body, attractor: body) -> tuple:
    fx, fy = FgVector(origin, attractor)
    ax = fx / origin.m
    ay = fy / origin.m
    return (ax, ay)

def dvVector(origin: body, attractor: body) -> tuple:
    ax, ay = aVector(origin, attractor)
    dvx = ax * dt
    dvy = ay * dt
    return (dvx, dvy)

def dvVectorSigma(origin: body, attractors: iter) -> tuple:
    dvx, dvy = 0, 0
    for attractor in attractors:
        if not origin == attractor:
            dv = dvVector(origin, attractor)
            ddvx, ddvy = dv
            dvx += ddvx
            dvy += ddvy
    return (dvx, dvy)

#Body Initialization
b1 = body(100, (-5, 5), (0, 0))
b2 = body(50, (5, -5), (0,0))
planets.append(b1)
planets.append(b2)
endt = 2

positions = [[None] * endt] * len(planets)
for t in range(endt):
    for p in planets:
        dpv = dvVectorSigma(p, planets)
        p.vx += dpv[0]
        p.vy += dpv[1]
    for i, p in enumerate(planets):
        p.x += p.vx
        p.y += p.vy
        positions[i][t] = (p.position())
        
plt.scatter(*positions[0])
plt.scatter(*positions[1])


#NOTE
#Be sure to make sure that all of the above functions are computing properly
#Then give plotting a shot. Lines 60 onward are the ones you'll want to rework
#And also convert everything over to numpy datatypes as much as possible or something
